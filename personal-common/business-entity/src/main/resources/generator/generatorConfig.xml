<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <properties resource="application.properties"/>
    <!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包-->
    <classPathEntry  location="${mysql.connector.java.path}"/>
    <!--<properties>-->

    <!--</properties>-->
    <context id="MsBase" targetRuntime="MyBatis3" defaultModelType="flat">
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>
        <!--数据库链接URL，用户名、密码 -->
        <!--<jdbcConnection driverClass="${spring.datasource.driver-class-name}"-->
                        <!--connectionURL="${spring.datasource.url}"-->
                        <!--userId="${spring.datasource.username}"-->
                        <!--password="${spring.datasource.password}"></jdbcConnection>-->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver" connectionURL="jdbc:mysql://60.205.149.16/my_cost?serverTimezone=GMT%2B8" userId="root" password="jz123!@#"></jdbcConnection>
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!-- 生成模型的包名和位置-->
        <javaModelGenerator targetPackage="${project.entityFolder}" targetProject="src/main/java">
            <!--  for MyBatis3/MyBatis3Simple自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；-->
            <property name="constructorBased" value="false"/>
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
            <property name="immutable" value="true"/>
            <!-- 设置一个根对象，
           如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项
           注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：
               1，属性名相同，类型相同，有相同的getter/setter方法；
            -->
            <property name="rootClass" value="${project.utilFolder}.BaseEntity"/>

        </javaModelGenerator>
        <!-- 生成映射文件的包名和位置-->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="true"/>

        </sqlMapGenerator>
        <!-- 生成resources/mapper的包名和位置-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${project.mapperFolder}" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="rootInterface" value="${project.utilFolder}.BaseMapper"/>
        </javaClientGenerator>
        <!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名-->
        <!--<table tableName="cost_item" >-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        <!--</table>-->
        <!--<table tableName="cost_record">-->
            <!--<property name="useActualColumnNames" value="true"/>-->
            <!--<property name="modelOnly" value="true"/>-->
        <!--</table>-->
        <table tableName="cost_type">
            <property name="useActualColumnNames" value="true"/>
            <!--<property name="modelOnly" value="true"/>-->
        </table>
        <!--<table tableName="cost_tag">-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        <!--</table>-->
        <!--<table tableName="sys_user">-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        <!--</table>-->
        <!--<table tableName="sys_role">-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        <!--</table>-->
        <!--<table tableName="cost_tag" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>-->
        <!--<table tableName="cost_tag_assign" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>-->
        <!--<table tableName="sys_role" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>-->
        <!--<table tableName="sys_user" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        <!--</table>-->
        <!--<table tableName="cost_item">-->
            <!--&lt;!&ndash; 参考 javaModelGenerator 的 constructorBased属性&ndash;&gt;-->
            <!--<property name="constructorBased" value="false"/>-->

            <!--&lt;!&ndash; 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； &ndash;&gt;-->
            <!--<property name="ignoreQualifiersAtRuntime" value="false"/>-->

            <!--&lt;!&ndash; 参考 javaModelGenerator 的 immutable 属性 &ndash;&gt;-->
            <!--<property name="immutable" value="false"/>-->

            <!--&lt;!&ndash; 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 &ndash;&gt;-->
            <!--<property name="modelOnly" value="true"/>-->

            <!--&lt;!&ndash; 参考 javaModelGenerator 的 rootClass 属性-->
            <!--<property name="rootClass" value=""/>-->
             <!--&ndash;&gt;-->

            <!--&lt;!&ndash; 参考javaClientGenerator 的  rootInterface 属性-->
            <!--<property name="rootInterface" value=""/>-->
            <!--&ndash;&gt;-->

            <!--&lt;!&ndash; 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog-->
            <!--<property name="runtimeCatalog" value=""/>-->
            <!--&ndash;&gt;-->

            <!--&lt;!&ndash; 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema-->
            <!--<property name="runtimeSchema" value=""/>-->
            <!--&ndash;&gt;-->

            <!--&lt;!&ndash; 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename-->
            <!--<property name="runtimeTableName" value=""/>-->
            <!--&ndash;&gt;-->

            <!--&lt;!&ndash; 注意，该属性只针对MyBatis3Simple有用；-->
                <!--如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；-->
             <!--&ndash;&gt;-->
            <!--&lt;!&ndash;<property name="selectAllOrderByClause" value="age desc,username asc"/>&ndash;&gt;-->

            <!--&lt;!&ndash; 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate &ndash;&gt;-->
            <!--<property name="useActualColumnNames" value="true"/>-->
            <!--<generatedKey column="id" sqlStatement="SELECT LAST_INSERT_ID()" identity="true" />-->

            <!--&lt;!&ndash; generatedKey用于生成生成主键的方法，-->
                <!--如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选-->
                <!--column:主键的列名；-->
                <!--sqlStatement：要生成的selectKey语句，有以下可选项：-->
                    <!--Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()-->
                    <!--DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()-->
                    <!--DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1-->
                    <!--Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()-->
                    <!--HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()-->
                    <!--Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1-->
                    <!--MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()-->
                    <!--SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()-->
                    <!--SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY-->
                    <!--JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性-->
            <!--<generatedKey column="" sqlStatement=""/>-->
             <!--&ndash;&gt;-->

            <!--&lt;!&ndash;-->
                <!--该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，-->
                <!--比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；-->
                <!--那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是-->
                <!--custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；-->
                <!--注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，-->
                <!--如果使用了columnOverride元素，该属性无效；-->
            <!--<columnRenamingRule searchString="" replaceString=""/>-->
             <!--&ndash;&gt;-->


            <!--&lt;!&ndash; 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；-->
                <!--column:要重新设置的列名；-->
                <!--注意，一个table元素中可以有多个columnOverride元素哈~-->
             <!--&ndash;&gt;-->
        <!--</table>-->
    </context>
</generatorConfiguration>
